# Generated by Django 5.0.4 on 2024-06-14 08:17

import django.core.validators
import django.db.models.deletion
import education.validators
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Nomi')),
            ],
        ),
        migrations.CreateModel(
            name='LessonHomework',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('homework', models.CharField(max_length=255, verbose_name='Uyga vazifa')),
                ('file', models.FileField(blank=True, null=True, upload_to='lesson/videos/homework/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['mp4', 'WMV', 'png', 'jpg', 'rar', 'zip'])], verbose_name='Dars uyga vazifasi')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Yaratilgan vaqti')),
                ('deadline', models.DateTimeField(verbose_name='Vazifa muddati')),
            ],
        ),
        migrations.CreateModel(
            name='Moderator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Nomi')),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Kurs nomi')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Malumot')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Narxi')),
                ('duration', models.IntegerField(default=0, verbose_name='Davomiyligi')),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='education.category', verbose_name='Kategoriya')),
                ('students', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL, verbose_name='Oquvchilar')),
                ('moderator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='education.moderator')),
            ],
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Nomi')),
                ('course', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='education.course', verbose_name='Kurs')),
            ],
        ),
        migrations.CreateModel(
            name='HomeworkFromStudent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='lesson/videos/students-homework/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['rar', 'zip', 'png', 'jpg', 'mp4', 'WMV'])])),
                ('description', models.CharField(max_length=255, verbose_name='Izoh')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('student', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Oquvchi')),
                ('lesson_homework', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='education.lessonhomework', verbose_name='Uyga vazifa')),
            ],
        ),
        migrations.CreateModel(
            name='LessonVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Mavzu')),
                ('video', models.FileField(upload_to='lesson/videos/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['mp4', 'WMV'])], verbose_name='Dars videosi')),
                ('lesson', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='education.lesson')),
            ],
        ),
        migrations.AddField(
            model_name='lessonhomework',
            name='lesson_video',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='education.lessonvideo'),
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(default='default_avatar/avatar.jpg', upload_to='profile_photos/', verbose_name='Rasm')),
                ('full_name', models.CharField(max_length=255, verbose_name='Toliq ism')),
                ('phone_number', models.CharField(max_length=13, validators=[education.validators.validate_phone], verbose_name='Telefon raqam')),
                ('address', models.CharField(blank=True, max_length=255, null=True, verbose_name='Manzil')),
                ('telegram', models.CharField(blank=True, max_length=255, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='moderator',
            name='profile',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='education.profile', verbose_name='Profil'),
        ),
        migrations.AddField(
            model_name='moderator',
            name='status',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='education.status', verbose_name='Mutaxasisligi'),
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='education.profile', verbose_name='Profil')),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='education.status', verbose_name='Mutaxasisligi')),
            ],
        ),
        migrations.AddField(
            model_name='course',
            name='teacher',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='education.teacher', verbose_name="O'qituvchi"),
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('lesson_video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='education.lessonvideo')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('lesson_video', 'user')},
            },
        ),
    ]
